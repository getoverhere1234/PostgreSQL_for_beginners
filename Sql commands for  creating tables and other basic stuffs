--SQL TUTORIAL--
--CREATE TABLE with constraints such as not null, primary key(which is unique to the table)

--

create table customer
("ID" int8 PRIMARY KEY,
 "Name" VARCHAR(50) NOT NULL,
 "Age" int NOT NULL,
 "City" char(50),
 "salary" numeric
	);
	
--now insert data
--string data do require ''
insert into customer
(ID, Name, Age, City, salary)
values
(1, 'Sam', 26, 'Delhi', 9000),
(2, 'Ram', 19, 'Bangalore', 11000),
(3, 'Pam', 31, 'Mumbai', 6000),
(4, 'Jam', 42, 'Pune', 10000);
-- this create error, as in, it will not the table column names, to fix this

--
INSERT INTO customer ("ID", "Name", "Age", "City", "salary")
VALUES
(1, 'Sam', 26, 'Delhi', 9000),
(2, 'Ram', 19, 'Bangalore', 11000),
(3, 'Pam', 31, 'Mumbai', 6000),
(4, 'Jam', 42, 'Pune', 10000);
-- so basically, you have to input the column name as entered during data creation


--update table

--let us update tbale no 4

update customer
set "Name" = 'Jam', "Age" = 32
where "ID" = 4

-- As noticed, since we created the table with "" in column names, we have to put the "" every time we sepcify the problem
-- To fix this we can create a table as given below
create table customer1
(ID int8 PRIMARY KEY,
 Name VARCHAR(50) NOT NULL,
 Age int NOT NULL,
 City char(50),
 salary numeric
	);

--followed by 
INSERT INTO customer1 (id, name, age, city, salary)
VALUES
(1, 'Sam', 26, 'Delhi', 9000),
(2, 'Ram', 19, 'Bangalore', 11000),
(3, 'Pam', 31, 'Mumbai', 6000),
(4, 'Jam', 42, 'Pune', 10000);

select * from customer1;

update customer1
set name = 'raven', age = 1245
where id = 4;


--Delete values
--delete from table_name where condition

delete from customer1
where id = 3;

---- to update tables
-- set the details you want to change, then select the column name

update customer1
set name = 'jai', age = 32
where id = 4

-- to delete values

delete from customer1
where id = 4

--alter table, to add, delete, or modify columns
--There are three examples here
-- add i.e. alter table table_name
-- Add column name
-- drop/delete column, i.e. alter table
-- drop column column_name
-- and lastly, modify
-- alter table_name
-- alter column column name data type
-- to change name of column we use
-- alter table table_name
change
--
alter table customer1
add column sex varchar(50)

--
alter table customer1
drop column sex


---
-- select statement is used to select database, the name thing to remember here is
-- * = all, distinct = provides unique field.


select distinct age 
from customer1 

-- next is the where clause
-- where will specify

select *
from customer1
where age = 42


-- operators in SQL

--arithematric= addition, substraction, multiplication etc
--comparision operators: used for compareision eg, equal, not equal
-- logical operators to perfrom boolean operations eg all, in, between, like, and, or, not, any
-- bitwise: perrom bit operations eg. Bitwise AND (&), Bitwise OR()


SELECT * FROM customer1
where age = 42
and name = 'Jam'

--another frequently used commands are the limit, and order by

select *
from customer1
order by name desc limit 2
--


--next is importing csv
--create table with headers as same as excel
create table customer
(customer_id int8, frist_name varchar(50), last_name varchar(50), email varchar(100), address_id int8)

-- to copy csv file
copy customer(customer_id, frist_name, last_name, email, address_id)
from 'D:\Statistics\port porfilio\sql tutorail\customer.csv'
Delimiter ','
csv header

-- next is functions in sql
-- functions are database objects that contains a set of sql statements to perfom specific task
--eg system defined functions.
-- eg of this is rand(), round(), upper(), lower(), sum(), max()etc
-- frequetnyl used functions are
/*• UPPER() converts the value of a field to uppercase
• LOWER() converts the value of a field to lowercase
• LENGTH() returns the length of the value in a text field
• SUBSTRING() extracts a substring from a string
• NOW() returns the current system date and time
• FORMAT() used to set the format of a field
• CONCAT() adds two or more strings together
• REPLACE() Replaces all occurrences of a substring within a string, with a new substring
• TRIM() removes leading and trailing spaces (or other specified characters) from a string*/
-- for more check https://www.postgresql.org/docs/9.1/functions-string.html

--another is user defined, once you define a function, you can call them again

-- 
--
-- to check functions
-- first is upper, 

select * from customer
--
select upper(frist_name) from customer
--
select length(frist_name) from customer
--

-- we noticed that name of the frist is typo, therefore

ALTER TABLE customer
RENAME COLUMN "frist_name" TO "first_name";
-- now we define first_name as varchar(50)
ALTER TABLE customer
ALTER COLUMN "first_name" TYPE VARCHAR(50);

--



-- to show the first 3 letters of the name we can use substring function
select substring(first_name, 1,3), first_name from customer

--
select substring(first_name, 2,4), first_name from customer

-- concat is for joining
--
select CONCAT(first_name, last_name), first_name, last_name
from customer

--replace, we will change all mary into mohan in the first_name column

select replace (first_name, 'Mary', 'Mohan')
from customer

-- trim used alot of data cleaning
-- to remove space for example in extra space in first_name
-- we will use a combination of right and left in this exmplae
-- basically from the right and left we will remove one each
-
SELECT RIGHT(first_name, LENGTH(first_name) - 1)  AS trimmed_first_name, first_name, last_name
FROM customer;

select left(first_name, length(first_name) -1)AS trimmed_first_name, first_name, last_name
FROM customer;

-- or a combination of both

SELECT RIGHT(LEFT(first_name, LENGTH(first_name) - 1), LENGTH(first_name) - 2) AS trimmed_first_name, first_name, last_name
FROM customer;


select * from customer

-- aggregate functions
-- these includes SUM, MAX etc

--the count function gives the number of rows

select count(salary) from customer1

-- this is very good to check nulll values
-- for eg, we can check if the salary column has the same no of rows as rest of columns in customer1
select count(*) from customer1

--SUM function adds value
select sum(salary) from customer1

--max gives maximum value, while min gives minimum value

select max(salary) from customer1

--average can be observed by avg value
select avg(amount) from payment
-- we observe here that the valaue obtained is 48.000000........
--pro tip, if we put round beofre round function we can cut determine the no of digit

select round(avg(amount), 2) from payment
-- the two specifies the amount of decimals that returns, here it is 2, i.e 48.00


-- next is the group by statement
-- group by groups rows that have same values into summary rows,
-- it is fotne used with aggregate functions such as count, max, etc
/* syntas
	select column_names
	from table_name
	group by column_name

	example is
	 
	select mode, sum(amount) as total
	from payment
	group by mode */

select mode, sum(amount) as total
from payment
group by mode

-- a reminder that we have to use group by after aggregate functions are used
-- we can reorder the following by

select mode, sum(amount) as total
from payment
group by mode
order by total asc

-- how to know which column to chose in the query?
-- first tip is select the column that contain groupings for eg 
--under one column, many rwos consiting of different groups such as A, B C, D
--this enables them to be grouped
-- if all the column values are unqiue, they cannot be grouped.


--HAVING clause, this is filter on the result of GROUP BY based on conditions
-- the WHERE clause places conditions on selected columns
-- whereas, HAVING clause places on conditons created by group by
/* syntax

 select column_names
 from table_names
 where condition
 group by column_name
 having condition
 
 
 */
 
 select mode, count(amount) as total
 from payment
 group by mode
 having count(amount) >= 3
 order by total desc 

-----the having count(amount) >= 3 indicate that entry of amount should be more than 3

- we can also make mulitple condition in having, for example

 select mode, count(amount) as total
 from payment
 group by mode
 having count(amount) >= 3 and count(amount) < 4
 order by total desc 

--
--
--TIMESTAMP DATA TYPE, containing both date and time parts
-- time contains ony time  
-- date contians date
-- year contains only year
--time stamps conatins date and time
-- timestamptz contains date, time and time zone

-- TIMESTAMP fucntions/operatiors
-- show timezone
-- select now()
-- selct timeofday()
-- select current_time
-- select current_date
-- we use such functions to know when creating new database

show timezone

 select now()
select timeofday()
select current_time
select current_date

--VERY IMPORTNT
EXTRACT Function
--The EXTRACT() function extracts a part from a given date value.
--Syntax: SELECT EXTRACT(MONTH FROM date_field) FROM Table
--• YEAR
--• QUARTER 
--• MONTH
--• WEEK
-- DAY
-- HOUR
-- MINUTE
--DOW – day of week
--DOY – day of year

--example

SELECT EXTRACT(MONTH FROM payment_date) as payment_month, payment_date
from payment

--
select extract(DOW from payment_date) as pay_dow, payment_date
from payment

---
select extract(DATE from payment_date) as pay_dow, payment_date
from payment
---

-- JOIN--
/* A JOIN clause is used to combine data from two or 
more tables, based on a related column between 
them

INNER JOIN
• Returns records that have 
matching values in both 
tables

• Syntax
SELECT column_name(s) 
FROM TableA
INNER JOIN TableB
ON TableA.col_name = TableB.col_name

IT IS CRITICAL THAT THE NAME OF COLUMNS IN BOTH TABLES MUST BE IDENTIFCAL
ALSO IT DOESNT MATTER WHICH TABLE YOU BRING IN FIRST




• Example

SELECT *
FROM customer AS c
INNER JOIN payment AS p
ON c.customer_id = p.customer_id


LEFT JOIN
• Returns all records from the 
left table, and the matched 
records from the right table

LEFT JOIN
• Syntax
SELECT column_name(s) 
FROM TableA
LEFT JOIN TableB
ON TableA.col_name = TableB.col_name
• Example
SELECT *
FROM customer AS c
LEFT JOIN payment AS p
ON c.customer_id = p.customer_id


RIGHT JOIN
• Returns all records from the 
right table, and the matched 
records from the left table

RIGHT JOIN
• Syntax
SELECT column_name(s) 
FROM TableA
RIGHT JOIN TableB
ON TableA.col_name = TableB.col_name
• Example
SELECT *
FROM customer AS c
RIGHT JOIN payment AS p
ON c.customer_id = p.customer_id

FULL JOIN
• Returns all records when 
there is a match in either left 
or right table

FULL JOIN
• Syntax
SELECT column_name(s) 
FROM TableA
FULL OUTER JOIN TableB
ON TableA.col_name = TableB.col_name
• Example
SELECT *
FROM customer AS c
FULL OUTER JOIN payment AS p
ON c.customer_id = p.customer_id


Which JOIN To Use
• INNER JOIN: Returns records that have matching values in both tables
• LEFT JOIN: Returns all records from the left table, and the matched 
records from the right table
• RIGHT JOIN: Returns all records from the right table, and the matched 
records from the left table
• FULL JOIN: Returns all records when there is a match in either left or 
right tablE
--

--  */

-- inner join example, most used example of join

select c.first_name, p.amount, p.mode
from customer as c
inner join payment as p
on c.customer_id = p.customer_id


--left join, another frequently used join, where all left tables will be retained, but only those that macth left column will be retained from right table
-- whichever table you select first becomes your left table

select *
from customer as c
left join payment as p
on c.customer_id = p.customer_id


--
/* SELF JOIN
• A self join is a regular join in which a table is joined to 
itself
• SELF Joins are powerful for comparing values in a 
column of rows with the same table
• Syntax

SELECT column_name(s) 
FROM Table AS T1
JOIN Table AS T2
ON T1.col_name = T2.col_name


-- This is very useful for comparing rows value within the same table */

CREATE TABLE emp
(empid bigint, empname varchar(50), manager_id bigint)

insert into emp (empid, empname, manager_id)
values
(1, 'Agni', 3),
 (2, 'Akash', 4),
 (3, 'Dharti', 2),
 (4, 'Vayu', 3)
 
 
 --

--
select * 
from emp as T1
JOIN emp as T2
ON T2.empid = T1.manager_id

---
select T1.empname as employee_name, T2.empname as manager_name
from emp as T1
JOIN emp as T2
ON T2.empid = T1.manager_id

---
/*
UNION
The SQL UNION clause/operator is used to combine/concatenate the results 
of two or more SELECT statements without returning any duplicate rows and 
keeps unique records
To use this UNION clause, each SELECT statement must have
• The exact number of columns selected and expressions
• The same data type and
• Have them in the same order
• Syntax
SELECT column_name(s) FROM TableA
UNION
SELECT column_name(s) FROM TableB
• Example
SELECT cust_name, cust_amount from custA
UNION
SELECT cust_name, cust_amount from custB 



UNION ALL
In UNION ALL everything is same as UNION, it 
combines/concatenate two or more table but keeps all 
records, including duplicates
• Syntax
SELECT column_name(s) FROM TableA
UNION ALL
SELECT column_name(s) FROM TableB
• Example
SELECT cust_name, cust_amount from custA
UNION ALL
SELECT cust_name, cust_amount from custB
*/


---------
--subquery
/* SUB QUERY
A Subquery or Inner query or a Nested query allows us to 
create complex query on the output of another query
• Sub query syntax involves two SELECT statements 

• Syntax

SELECT column_name(s)
FROM table_name
WHERE column_name operator 
( SELECT column_name FROM table_name WHERE ... ); */
--
-- find the details of customers whose payment amount is more than avergae of total amount paid by all customer
-- q1 find the average amount
-- q2 filter the customer's whose amount> average
CREATE TABLE payment1 (
    customer_id bigint,
    amount bigint,
    mode varchar(50),
    payment_date date);
	
INSERT INTO payment1 (customer_id, amount, mode, payment_date)
VALUES
    (1, 60.00, 'Cash', '2020-09-24'),
    (2, 30.00, 'Credit Card', '2020-04-27'),
    (3, 90.00, 'Credit Card', '2020-07-07'),
    (4, 50.00, 'Debit Card', '2020-12-02'),
    (5, 40.00, 'Mobile Payment', '2020-11-20'),
    (6, 40.00, 'Debit Card', '2021-06-28'),
    (7, 10.00, 'Cash', '2021-08-25'),
    (8, 30.00, 'Mobile Payment', '2021-06-17'),
    (9, 80.00, 'Cash', '2021-08-25'),
    (10, 50.00, 'Mobile Payment', '2021-03-11'),
    (11, 70.00, 'Cash', '2022-01-11'),
    (12, 60.00, 'Netbanking', '2022-09-11'),
    (13, 30.00, 'Netbanking', '2022-10-12'),
    (14, 50.00, 'Credit Card', '2022-05-14'),
    (15, 30.00, 'Credit Card', '2022-09-25');
	
INSERT INTO payment1 (customer_id, amount, mode, payment_date)
VALUES
    (1, 60.00, 'Cash', '2020-09-24'),
    (10, 70.00, 'Mobile Payment', '2021-02-28'),
    (11, 80.00, 'Cash', '2021-03-01'),
    (2, 500.00, 'Credit Card', '2020-04-27'),
    (8, 100.00, 'Cash', '2021-01-26');

---
select * from payment1

--find avg amount
select avg(amount) from payment1
-- filter customer data filter > than avg

select *
from payment1
where amount > 76.50

-- to make this query dynamic, i.e to update itself automatically once new values are inserted we use the following


select *
from payment1
where amount > (select avg(amount) from payment1)

--this is an example of nested query

select * from customer
---
select customer_id from customer
-- this will create list of customer, therefore

select customer_id, amount, mode
from payment
where customer_id IN (select customer_id from customer)

---
select first_name, last_name
from customer c
where exists (select customer_id, amount
from payment p
where p.customer_id = c.customer_id
and amount >60 )


--WINDOWS FUNCTION
--This is used for complex query
/Window functions applies aggregate, ranking and analytic functions
over a particular window (set of rows).
• And OVER clause is used with window functions to define that
window./

Let’s look at some definitions:
• Window function applies aggregate, ranking and analytic functions
over a particular window; for example, sum, avg, or row_number
• Expression is the name of the column that we want the window
function operated on. This may not be necessary depending on what
window function is used
• OVER is just to signify that this is a window function
• PARTITION BY divides the rows into partitions so we can specify which
rows to use to compute the window function
• ORDER BY is used so that we can order the rows within each partition.
This is optional and does not have to be specified
• ROWS can be used if we want to further limit the rows within our
partition. This is optional and usually not used

WINDOW FUNCTION TYPES
There is no official division of the SQL window functions into
categories but high level we can divide into three types

Aggregate		
• SUM
• AVG
• COUNT
• MIN
• MAX


Ranking
• ROW_NUMBER
• RANK
• DENSE_RANK
• PERCENT_RANK


Value/Analytic
• LEAD
• LAG
• FIRST_VALUE
• LAST_VALUE
-----------------------------------------------------------------
---CASE Expression
• The CASE expression goes through conditions and returns
a value when the first condition is met (like if-then-else
statement). If no conditions are true, it returns the value
in the ELSE clause.
• If there is no ELSE part and no conditions are true, it
returns NULL.
• Also called CASE STATEMENT----

--• General CASE Syntax
CASE
WHEN condition1 THEN result1
WHEN condition2 THEN result2
WHEN conditionN THEN resultN
ELSE other_result
END;---


SELECT customer_id, amount,
CASE
WHEN amount > 100 THEN 'Expensive product'
WHEN amount = 100 THEN 'Moderate product'
ELSE 'Inexpensive product'
END AS ProductStatus
FROM payment

----CASE Expression Syntax
• CASE Expression Syntax
CASE Expression
WHEN value1 THEN result1
WHEN value2 THEN result2
WHEN valueN THEN resultN
ELSE other_result
END;

--• Example:
SELECT customer_id,
CASE amount
WHEN 500 THEN 'Prime Customer'
WHEN 100 THEN 'Plus Customer'
ELSE 'Regular Customer'
END AS CustomerStatus
FROM payment

-------------------Common Table Expression (CTE)
• A common table expression, or CTE, is a temporary
named result set created from a simple SELECT statement
that can be used in a subsequent SELECT statement
• We can define CTEs by adding a WITH clause directly
before SELECT, INSERT, UPDATE, DELETE, or MERGE
statement.
• The WITH clause can include one or more CTEs separated
by commas


























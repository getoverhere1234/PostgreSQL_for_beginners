--SQL TUTORIAL--
--CREATE TABLE with constraints such as not null, primary key(which is unique to the table)

--

create table customer
("ID" int8 PRIMARY KEY,
 "Name" VARCHAR(50) NOT NULL,
 "Age" int NOT NULL,
 "City" char(50),
 "salary" numeric
	);
	
--now insert data
--string data do require ''
insert into customer
(ID, Name, Age, City, salary)
values
(1, 'Sam', 26, 'Delhi', 9000),
(2, 'Ram', 19, 'Bangalore', 11000),
(3, 'Pam', 31, 'Mumbai', 6000),
(4, 'Jam', 42, 'Pune', 10000);
-- this create error, as in, it will not the table column names, to fix this

--
INSERT INTO customer ("ID", "Name", "Age", "City", "salary")
VALUES
(1, 'Sam', 26, 'Delhi', 9000),
(2, 'Ram', 19, 'Bangalore', 11000),
(3, 'Pam', 31, 'Mumbai', 6000),
(4, 'Jam', 42, 'Pune', 10000);
-- so basically, you have to input the column name as entered during data creation


--update table

--let us update tbale no 4

update customer
set "Name" = 'Jam', "Age" = 32
where "ID" = 4

-- As noticed, since we created the table with "" in column names, we have to put the "" every time we sepcify the problem
-- To fix this we can create a table as given below
create table customer1
(ID int8 PRIMARY KEY,
 Name VARCHAR(50) NOT NULL,
 Age int NOT NULL,
 City char(50),
 salary numeric
	);

--followed by 
INSERT INTO customer1 (id, name, age, city, salary)
VALUES
(1, 'Sam', 26, 'Delhi', 9000),
(2, 'Ram', 19, 'Bangalore', 11000),
(3, 'Pam', 31, 'Mumbai', 6000),
(4, 'Jam', 42, 'Pune', 10000);

select * from customer1;

update customer1
set name = 'raven', age = 1245
where id = 4;


--Delete values
--delete from table_name where condition

delete from customer1
where id = 3;

---- to update tables
-- set the details you want to change, then select the column name

update customer1
set name = 'jai', age = 32
where id = 4

-- to delete values

delete from customer1
where id = 4

--alter table, to add, delete, or modify columns
--There are three examples here
-- add i.e. alter table table_name
-- Add column name
-- drop/delete column, i.e. alter table
-- drop column column_name
-- and lastly, modify
-- alter table_name
-- alter column column name data type
-- to change name of column we use
-- alter table table_name
change
--
alter table customer1
add column sex varchar(50)

--
alter table customer1
drop column sex


---
-- select statement is used to select database, the name thing to remember here is
-- * = all, distinct = provides unique field.


select distinct age 
from customer1 

-- next is the where clause
-- where will specify

select *
from customer1
where age = 42


-- operators in SQL

--arithematric= addition, substraction, multiplication etc
--comparision operators: used for compareision eg, equal, not equal
-- logical operators to perfrom boolean operations eg all, in, between, like, and, or, not, any
-- bitwise: perrom bit operations eg. Bitwise AND (&), Bitwise OR()


SELECT * FROM customer1
where age = 42
and name = 'Jam'

--another frequently used commands are the limit, and order by

select *
from customer1
order by name desc limit 2
--


--next is importing csv
--create table with headers as same as excel
create table customer
(customer_id int8, frist_name varchar(50), last_name varchar(50), email varchar(100), address_id int8)

-- to copy csv file
copy customer(customer_id, frist_name, last_name, email, address_id)
from 'D:\Statistics\port porfilio\sql tutorail\customer.csv'
Delimiter ','
csv header

-- next is functions in sql
-- functions are database objects that contains a set of sql statements to perfom specific task
--eg system defined functions.
-- eg of this is rand(), round(), upper(), lower(), sum(), max()etc
-- frequetnyl used functions are
/*• UPPER() converts the value of a field to uppercase
• LOWER() converts the value of a field to lowercase
• LENGTH() returns the length of the value in a text field
• SUBSTRING() extracts a substring from a string
• NOW() returns the current system date and time
• FORMAT() used to set the format of a field
• CONCAT() adds two or more strings together
• REPLACE() Replaces all occurrences of a substring within a string, with a new substring
• TRIM() removes leading and trailing spaces (or other specified characters) from a string*/
-- for more check https://www.postgresql.org/docs/9.1/functions-string.html

--another is user defined, once you define a function, you can call them again

-- 
--
-- to check functions
-- first is upper, 

select * from customer
--
select upper(frist_name) from customer
--
select length(frist_name) from customer
--

-- we noticed that name of the frist is typo, therefore

ALTER TABLE customer
RENAME COLUMN "frist_name" TO "first_name";
-- now we define first_name as varchar(50)
ALTER TABLE customer
ALTER COLUMN "first_name" TYPE VARCHAR(50);

--



-- to show the first 3 letters of the name we can use substring function
select substring(first_name, 1,3), first_name from customer

--
select substring(first_name, 2,4), first_name from customer

-- concat is for joining
--
select CONCAT(first_name, last_name), first_name, last_name
from customer

--replace, we will change all mary into mohan in the first_name column

select replace (first_name, 'Mary', 'Mohan')
from customer

-- trim used alot of data cleaning
-- to remove space for example in extra space in first_name
-- we will use a combination of right and left in this exmplae
-- basically from the right and left we will remove one each
-
SELECT RIGHT(first_name, LENGTH(first_name) - 1)  AS trimmed_first_name, first_name, last_name
FROM customer;

select left(first_name, length(first_name) -1)AS trimmed_first_name, first_name, last_name
FROM customer;

-- or a combination of both

SELECT RIGHT(LEFT(first_name, LENGTH(first_name) - 1), LENGTH(first_name) - 2) AS trimmed_first_name, first_name, last_name
FROM customer;


select * from customer

-- aggregate functions
-- these includes SUM, MAX etc

--the count function gives the number of rows

select count(salary) from customer1

-- this is very good to check nulll values
-- for eg, we can check if the salary column has the same no of rows as rest of columns in customer1
select count(*) from customer1

--SUM function adds value
select sum(salary) from customer1

--max gives maximum value, while min gives minimum value

select max(salary) from customer1

--average can be observed by avg value
select avg(amount) from payment
-- we observe here that the valaue obtained is 48.000000........
--pro tip, if we put round beofre round function we can cut determine the no of digit

select round(avg(amount), 2) from payment
-- the two specifies the amount of decimals that returns, here it is 2, i.e 48.00


-- next is the group by statement
-- group by groups rows that have same values into summary rows,
-- it is fotne used with aggregate functions such as count, max, etc
/* syntas
	select column_names
	from table_name
	group by column_name

	example is
	 
	select mode, sum(amount) as total
	from payment
	group by mode */

select mode, sum(amount) as total
from payment
group by mode

-- a reminder that we have to use group by after aggregate functions are used
-- we can reorder the following by

select mode, sum(amount) as total
from payment
group by mode
order by total asc

-- how to know which column to chose in the query?
-- first tip is select the column that contain groupings for eg 
--under one column, many rwos consiting of different groups such as A, B C, D
--this enables them to be grouped
-- if all the column values are unqiue, they cannot be grouped.


--HAVING clause, this is filter on the result of GROUP BY based on conditions
-- the WHERE clause places conditions on selected columns
-- whereas, HAVING clause places on conditons created by group by
/* syntax

 select column_names
 from table_names
 where condition
 group by column_name
 having condition
 
 
 */
 
 select mode, count(amount) as total
 from payment
 group by mode
 having count(amount) >= 3
 order by total desc 


- we can also make mulitple condition in having, for example

 select mode, count(amount) as total
 from payment
 group by mode
 having count(amount) >= 3 and count(amount) < 4
 order by total desc 

--
--
--TIMESTAMP DATA TYPE, containing both date and time parts
-- time contains ony time  
-- date contians date
-- year contains only year
--time stamps conatins date and time
-- timestamptz contains date, time and time zone

-- TIMESTAMP fucntions/operatiors
-- show timezone
-- select now()
-- selct timeofday()
-- select current_time
-- select current_date
-- we use such functions to know when creating new database

show timezone

 select now()
select timeofday()
select current_time
select current_date

--VERY IMPORTNT
EXTRACT Function
--The EXTRACT() function extracts a part from a given date value.
--Syntax: SELECT EXTRACT(MONTH FROM date_field) FROM Table
--• YEAR
--• QUARTER 
--• MONTH
--• WEEK
-- DAY
-- HOUR
-- MINUTE
--DOW – day of week
--DOY – day of year

--example

SELECT EXTRACT(MONTH FROM payment_date) as payment_month, payment_date
from payment

--
select extract(DOW from payment_date) as pay_dow, payment_date
from payment

---
select extract(DATE from payment_date) as pay_dow, payment_date
from payment
---







